# ****************************************************************************
# ****************************************************************************
# Copyright SoC Design Research Group, All rights reserved.
# Electronics and Telecommunications Research Institute (ETRI)
# 
# THESE DOCUMENTS CONTAIN CONFIDENTIAL INFORMATION AND KNOWLEDGE
# WHICH IS THE PROPERTY OF ETRI. NO PART OF THIS PUBLICATION IS
# TO BE USED FOR ANY OTHER PURPOSE, AND THESE ARE NOT TO BE
# REPRODUCED, COPIED, DISCLOSED, TRANSMITTED, STORED IN A RETRIEVAL
# SYSTEM OR TRANSLATED INTO ANY OTHER HUMAN OR COMPUTER LANGUAGE,
# IN ANY FORM, BY ANY MEANS, IN WHOLE OR IN PART, WITHOUT THE
# COMPLETE PRIOR WRITTEN PERMISSION OF ETRI.
# ****************************************************************************
# 2019-04-03
# Kyuseung Han (han@etri.re.kr)
# ****************************************************************************
# ****************************************************************************

ifdef RVX_MINI_HOME
	include ./rvx_config.mh
endif

include ./rvx_init.mh
-include ./rvx_each.mh
-include ${RVX_ENV}/makefile/rvx_home.mh

###########
# install #
###########

PYTHON_CMD_LIST = install gnome windows_binary ssh misc config \
									clean distclean \
									sync resync install_sync sync_version \
									enable_debug disable_debug check_remote_log tool_config \
									read_only after_update \
									example example.install example.uninstall\
									compiler compiler.install compiler.uninstall\
									synthesizer synthesizer.install synthesizer.uninstall\
									freeze unfreeze git_add_result\
									check

${PYTHON_CMD_LIST}:%:
	@${PYTHON3_CMD} ./rvx_install/install.py -cmd $(*)

_check_mini_home:
	$(if $(RVX_MINI_HOME), , $(error RVX_MINI_HOME is NOT defined))

_check_linux:
	@uname

gui:
	@java -jar ./rvx_install/rvx_remote.jar

platform_gui:
	@cd ./platform && make gui

update_mini_git:
	@cd ./rvx_install && make setup_mini_git

########
# fork #
########

HWLIB_SPECIAL_DIRNAME=rvx_special_ip
HWLIB_SPECIAL_DIR=${CURDIR}/${HWLIB_SPECIAL_DIRNAME}

TARGET_DIR_ABS = $(abspath ${TARGET})

FORK_SUBGIT_LIST = rvx_init rvx_install
FORK_HWLIB_SPECIAL_IP_LIST=$(basename $(notdir $(wildcard ${HWLIB_SPECIAL_DIR}/*)))
FORK_USER_DIR_LIST=$(filter-out .git local_setup manual env sync rvx_%, $(shell find . -mindepth 1 -maxdepth 1 -type d -exec basename {} \;))

_check_target: _check_mini_home
	$(if $(TARGET), , $(error TARGET is NOT defined))
	@echo TARGET: ${TARGET_DIR_ABS}
	@if [ "$(TARGET_DIR_ABS)" = "$(CURDIR)" ]; then \
		echo "*Error: TARGET is same as the current directory"; \
		exit 1; \
	fi
	@if ! [ -d ${TARGET_DIR_ABS} ] ;	\
	then \
		echo "*Error: TARGET is NOT a directory"; \
		exit 1; \
	fi
	@if ! [ -d ${TARGET_DIR_ABS}/.git ] ;	\
	then \
		echo "*Error: TARGET is NOT a git repository"; \
		exit 1; \
	fi

fork_rvx: _check_target $(addprefix fork_subgit., $(FORK_SUBGIT_LIST))
	-@cd ${TARGET_DIR_ABS}/rvx_install && make --no-print-directory setup_mini_git

$(addprefix fork_subgit., $(FORK_SUBGIT_LIST)):fork_subgit.%:
	-@cd ${TARGET_DIR_ABS} && git submodule deinit -f $(*)
	-@cd ${TARGET_DIR_ABS} && rm -rf .git/modules/$(*)
	-@cd ${TARGET_DIR_ABS} && git rm -rf $(*)
	@cd ${TARGET_DIR_ABS} && rm -rf $(*)
	cd ${TARGET_DIR_ABS} && git submodule add -f ${CURDIR}/$(*)
	cd ${TARGET_DIR_ABS} && git config -f .gitmodules submodule.$(*).url "https://bitbucket.org/kyuseung_han/$(*).git"
	cd ${TARGET_DIR_ABS}/$(*) && git pull origin master

fork: fork_rvx fork_hwlib_special $(addprefix fork_user_dir., $(FORK_USER_DIR_LIST))

fork_hwlib_special:
	@echo ${FORK_HWLIB_SPECIAL_IP_LIST}
	-@cd ${TARGET_DIR_ABS} && git checkout ./${HWLIB_SPECIAL_DIRNAME}
	@cd ${TARGET_DIR_ABS} && mkdir -p ${HWLIB_SPECIAL_DIRNAME}
	@for ip_name in ${FORK_HWLIB_SPECIAL_IP_LIST}; do	\
		cd ${TARGET_DIR_ABS}/${HWLIB_SPECIAL_DIRNAME} && rm -rf ./$$ip_name; \
		cp -r ${HWLIB_SPECIAL_DIR}/$$ip_name ${TARGET_DIR_ABS}/${HWLIB_SPECIAL_DIRNAME}/; \
	done

$(addprefix fork_user_dir., $(FORK_USER_DIR_LIST)):fork_user_dir.%:
	-@cd ${TARGET_DIR_ABS} && git rm -rf $(*)
	@cd ${TARGET_DIR_ABS} && rm -rf $(*)
	cd ${TARGET_DIR_ABS} && cp -r ${CURDIR}/$(*) .

##########
# export #
##########

export: fork
	@cd ${TARGET_DIR_ABS} && rm -rf sync
	@cd ${TARGET_DIR_ABS} && cp -rf ${CURDIR}/sync .

.PHONY: ${PYTHON_CMD_LIST} _check_linux _check_mini_home _check_target compiler
